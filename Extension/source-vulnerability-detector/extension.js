//extension.js

const vscode = require('vscode');

const detectSQLI = require('./rules/no_sqli');
const detectXSS = require('./rules/no_xss')

// Diagnostic Collection
const diagnosticCollection = vscode.languages.createDiagnosticCollection('vulnerabilities');

function activate(context) {

	console.log('Congratulations, your extension "source-vulnerability-detector" is now active!');

	//Manuall scan command
	context.subscriptions.push(
		vscode.commands.registerCommand('extension.scanCode', async function () {
			scanActiveDocument();
		})
	);

	//scan code on doccument save
	vscode.workspace.onDidSaveTextDocument((document) => {
		scanDocument(document);
	})
}

function scanActiveDocument(){
	const editor = vscode.window.activeTextEditor;
	if (editor) {
		const document = editor.document;
		scanDocument(document);
	}
}

//scan document/code function
async function scanDocument(document) {
	const text = document.getText();
	
	const sqliVulnerabilities = {
		'Sqli vulnerability' : await detectSQLI(text),
		'XSS vulnerability' : await detectXSS(text),
	}
	//....
	
	const allVulnerabilities = {
		...sqliVulnerabilities,
		//...
	};

	//Display detected vulnerabilities
	displayVulnerabilityWarnings(document, allVulnerabilities);
};

function displayVulnerabilityWarnings(document, vulnerabilities) {
    // Array of Diagnostic entries
    const diagnosticEntries = [];

    for (const [vulnerabilityType, matches] of Object.entries(vulnerabilities)) {
        if (matches.length > 0) {
            matches.forEach(match => {
                // Diagnostic entry for the vulnerability
                const diagnostic = new vscode.Diagnostic(
                    new vscode.Range(match.lineNumber - 1, 0, match.lineNumber - 1, 0),
                    `${vulnerabilityType}\n`,
                    vscode.DiagnosticSeverity.Warning
                );
                diagnostic.source = '\nSVD Extension';

                // Adding diagnostic entry to array
                diagnosticEntries.push(diagnostic);
            });
        }
    }

    // Adding entries to the collection for the current document
    diagnosticCollection.set(document.uri, diagnosticEntries);
}


// extension deactivation
function deactivate() {
	//Dispose diagnostic collection after deactivation
	diagnosticCollection.dispose();
}

module.exports = {
	activate,
	deactivate
}

