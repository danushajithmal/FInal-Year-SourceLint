// other_rules.js
module.exports = async function detectOtherVulnerabilities(codespace, variableDeclarations) {
    const lines = codespace.split('\n');
    const vulnerabilities = [];
    let inMultiLineComment = false;

    for (let lineNumber = 0; lineNumber < lines.length; lineNumber++) {
        const line = lines[lineNumber].trim();

        if (line.includes('/*')) inMultiLineComment = true;
        if (line.includes('*/')) inMultiLineComment = false;
        if (inMultiLineComment || line.startsWith('//')) continue;

        // Check each variable against the line for potential file upload vulnerabilities
        Object.keys(variableDeclarations).forEach(async varName => {
            const response1 = await fileUploadVulnerabilities(line, varName);
            const response2 = await emailHeaderVulnerabilities(line, varName);
            if (response1) {
                vulnerabilities.push({
                    type: response1.type,
                    recommendation: response1.recommendation,
                    vulnerableCode: line,
                    lineNumber: lineNumber + 1,
                    variableName: varName
                });
            }
            if (response2) {
                vulnerabilities.push({
                    type: response2.type,
                    recommendation: response2.recommendation,
                    vulnerableCode: line,
                    lineNumber: lineNumber + 1,
                    variableName: varName
                });
            }
        });
    }

    return vulnerabilities;
}

async function fileUploadVulnerabilities(line, varName) {
    const patterns = [
        {
            pattern: new RegExp(`${varName}\\.mv\\(`, 'i'),
            type: "Direct File Upload without Validation",
            recommendation: "Validate file types, file size, file extension before saving files to the server."
        },
        {
            pattern: new RegExp(`${varName}\\.data\\.pipe\\(`, 'i'),
            type: "File Stream without Validation",
            recommendation: "Validate file types, file size, file extension before saving files to the server."
        },
    ];

    for (const { pattern, type, recommendation } of patterns) {
        if (pattern.test(line)) {
            return { type, recommendation, vulnerableCode: line };
        }
    }

    return null;
}

async function emailHeaderVulnerabilities(line, varName) {
    const patterns = [
        {
            pattern: new RegExp(`transporter\\.sendMail\\(\\s*${varName}\\s*,\\s*function\\s*\\(\\s*error\\s*,\\s*info\\s*\\)`, 'i'),
            type: "Potential insecure email header",
            recommendation: "Ensure that 'from', 'subject' attributes of email header are sanitized and validated before sending."
        },
        {
            pattern: new RegExp(`transporter\\.sendMail\\(\\s*${varName}\\s*\\)`, 'i'),
            type: "Potential insecure email header",
            recommendation: "Ensure that 'from', 'subject' attributes of email header are sanitized and validated before sending."
        },
        {
            pattern: new RegExp(`await\\s+transporter\\.sendMail\\(\\s*${varName}\\s*\\)`, 'i'),
            type: "Potential insecure email header",
            recommendation: "Ensure that 'from', 'subject' attributes of email header are sanitized and validated before sending."
        }

    ];

    for (const { pattern, type, recommendation } of patterns) {
        if (pattern.test(line)) {
            return { type, recommendation, vulnerableCode: line };
        }
    }

    return null;
}
