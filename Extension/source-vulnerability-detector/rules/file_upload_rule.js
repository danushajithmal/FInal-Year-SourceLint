const detectVulnerabilities = require('./other');

module.exports = async function analyzeFileUploads(codespace) {
    // Regex to identify API endpoints
    const apiRegex = /app\.(get|post|put|delete|patch)\(\s*['"`\/](.*?)['"`\/],\s*(?:async\s*)?\((req, res)\)\s*=>\s*\{([\s\S]*?)\}\s*\);/gm;
    let match;
    const variableDeclarations = {};

    // First pass: Extract all API handlers, clean comments, and track file-related variables
    while ((match = apiRegex.exec(codespace)) !== null) {
        const [_, method, path, params, body] = match;
        const cleanedBody = removeComments(body);

        // Direct extraction of file-related variables
        const varRegex = /(let|var|const)\s+(\w+)\s*=\s*req\.files\.(\w+)/g;
        let varMatch;

        while ((varMatch = varRegex.exec(cleanedBody)) !== null) {
            const varName = varMatch[2]; // Capture the variable name
            const lineNumber = getLineNumber(codespace, varMatch.index);

            // Check if the variable is sanitized
            const isSanitized = isVariableSanitized(cleanedBody, varName);

            // Only add variables to declarations if not sanitized
            if (!isSanitized) {
                variableDeclarations[varName] = {
                    line: lineNumber,
                    code: varMatch[0]
                };
            }
        }
    }

    console.log(variableDeclarations);
    const vulnerabilities = await detectVulnerabilities(codespace, variableDeclarations);
    return vulnerabilities;
};

function removeComments(body) {
    // Remove both single-line and multi-line comments
    return body.replace(/\/\/[^\n]*|\/\*[\s\S]*?\*\//g, '');
}

function getLineNumber(text, index) {
    // Calculate line number given an index in the text
    return text.substring(0, index).split('\n').length;
}

function isVariableSanitized(body, varName) {
    // Regex to check if the file extension is properly validated
    const extensionValidationRegex = new RegExp(
        `const\\s+fileExtension\\s*=\\s*path\\.extname\\(${varName}\\.name\\)\\.toLowerCase\\(\\);\\s*` +
        `const\\s+allowedExtensions\\s*=\\s*\\[.*?\\];\\s*` +
        `if\\s*\\(\\!allowedExtensions\\.includes\\(fileExtension\\)\\)\\s*\\{`,
        'i'
    );

    // Regex to check if the file is moved after validation
    const moveOperationRegex = new RegExp(
        `${varName}\\.mv\\(`,
        'i'
    );

    // Ensure the extension validation occurs before the file is moved
    const extensionMatch = extensionValidationRegex.exec(body);
    const moveMatch = moveOperationRegex.exec(body);

    // If either check is missing, consider the variable vulnerable
    if (!extensionMatch || !moveMatch) {
        return false;
    }
    // Ensure extension validation occurs before the move operation
    return extensionMatch.index < moveMatch.index;
}
