//rule no_sqli.js
module.exports = async function detectAndCheckSQLInjection(text) {
    const lines = text.split('\n');

    const vulnerabilities = [];

    let inMultiLineComment = false;

    for (let lineNumber = 0; lineNumber < lines.length; lineNumber++) {
        const line = lines[lineNumber].trim();

        // Check for multi-line comment start and end
        if (line.includes('/*')) inMultiLineComment = true;
        if (line.includes('*/')) inMultiLineComment = false;
        if (inMultiLineComment || line.startsWith('//') || line.startsWith('#')) continue;

        const response = await checkSQLInjection(line);
        if (response) {
            vulnerabilities.push({
                type: response.type,
                recommendation: response.recommendation,
                vulnerableCode:line,
                lineNumber: lineNumber + 1
            });
        }
    }

    return vulnerabilities;
}

async function checkSQLInjection(query) {
    
    const sqliPatterns = [
        {
            pattern: /(\bSELECT\s+.*?\bFROM\b\s+.*?\bWHERE\b\s+.*?\bUNION\b\s+SELECT\b)/i,
            type: "Union Based Injection",
            recommendation: "Ensure all user inputs are sanitized, particularly in complex queries involving UNION."
        },
        {
            pattern: /(\bSELECT\s+.*?\bFROM\b\s+.*?\bWHERE\b\s+.*?\b=\b[0-9]+\b(?:\s*OR\b\s*1=1)?)/i,
            type: "Tautology Based Injection",
            recommendation: "Use parameterized queries or prepared statements to avoid direct inclusion of user input."
        },
        {
            pattern: /(\bSELECT\b\s+.*?\bFROM\b\s+.*?\bWHERE\b\s+.*?\bIF\b\s*\(.*\bSLEEP\b\s*\(\d+\).*\))/i,
            type: "Time-Based Injection",
            recommendation: "Use parameterized queries and implement CAPTCHA to deter automated time-based attacks."
        },
        {
            pattern: /(\bINSERT\s+INTO\s+\w+\s*\([^)]*\)\s*VALUES\s*\(\s*'[^']*'\s*,\s*'[^']*'\s*\)\s*;?)/i,
            type: "Direct Insert Injection",
            recommendation: "Avoid constructing SQL queries directly from user inputs; use parameterized statements."
        },
        {
            pattern: /(\bINSERT\s+INTO\s+\w+\s*\([^)]*\)\s*VALUES\s*\(\s*\$\{[^}]*\}\s*,\s*\$\{[^}]*\}\s*\)\s*;?)/i,
            type: "Template Literal Injection",
            recommendation: "Validate and sanitize template literals, using context-specific validation."
        },
        {
            pattern: /(\bSELECT\b\s+.*?\bFROM\b\s+.*?\bWHERE\b\s+.*?\b=\b\s*['"].*\$\{.*\}.*['"]\s*;?)/i,
            type: "String Concatenation Injection",
            recommendation: "Never concatenate user-controlled variables directly into SQL queries."
        },
        {
            pattern: /(\bWAITFOR\s+DELAY\s+'\d{2}:\d{2}:\d{2}'\s*;?)/i,
            type: "Delay-Based Injection",
            recommendation: "Limit database user permissions and use parameterized queries to prevent execution delays."
        },
        {
            pattern: /(\bUNION\s+SELECT\b)/i,
            type: "Union Query Injection",
            recommendation: "Use rigorous input validation and parameterized queries to prevent this type of attack."
        },
        {
            pattern: /(\bDROP\s+TABLE\b)/i,
            type: "Destructive Query Injection",
            recommendation: "Restrict database permissions and ensure user inputs cannot alter database structure."
        },
        {
            pattern: /(\bAND\s+\$\{\w+\})/i,
            type: "Logical Operator Injection",
            recommendation: "Implement strict input validation to prevent the manipulation of logical operators."
        },
        {
            pattern: /(\bSELECT\b\s+.*?\bFROM\b\s+.*?\bWHERE\b\s+.*?\b=\s*\$\{.*\}\s*;?)/i,
            type: "Template Injection",
            recommendation: "Avoid using template strings to construct SQL queries. Prefer parameterized queries."
        },
        {
            pattern: /(\bSELECT\b\s+.*?\bFROM\b\s+.*?\bWHERE\b\s+.*?(?:\bOR\b|\bAND\b).*?(?!\b=\s*['"][^'"]+['"]\b).*?\$\{.*\}|['"].*?['"]\s*\+\s*['"].*?['"])/i,
            type: "Basic Injection",
            recommendation: "Use parameterized queries to prevent this type of injection."
        },
        {
            pattern: /(\bSELECT\b\s+.*?\bFROM\b\s+.*?\bWHERE\b\s+.*?\bLIKE\b\s*['"].*?\${.*}.*?['"])/i,
            type: "Dynamic SQL Generation",
            recommendation: "Use parameterized queries and avoid directly including user inputs in SQL statements."
        },
        {
            pattern: /(\bCALL\b\s+\w+\s*\([^)]*?\$\{[^}]*\}[^)]*\))/i,
            type: "Insecure Stored Procedure Invocation",
            recommendation: "Sanitize and validate all inputs used in stored procedure calls."
        },
        {
            pattern: /(\bSELECT\b\s+.*?\bFROM\b\s+.*?\bWHERE\b\s+.*?\b=\b\s*'.*\$\{.*\}'.*;?)/i,
            type: "String Concatenation Injection",
            recommendation: "Never concatenate user-controlled variables directly into SQL queries."
        },
        {
            pattern: /(\bUNION\b\s+\bSELECT\b\s+.*?\$\{.*\})/i,
            type: "Advanced Union Query Injection",
            recommendation: "Ensure rigorous input validation and parameterization to prevent complex UNION attacks."
        },
        {
            pattern: /(\bWAITFOR\b\s+DELAY\s+'[^']*';?)/i,
            type: "Delay-Based Injection",
            recommendation: "Limit database user permissions and use parameterized queries to prevent execution delays."
        },
        {
            pattern: /(\bSELECT\b\s+.*?\bFROM\b\s+.*?\bWHERE\b\s+.*?\bAND\b\s+\(\d+\s*=\s*\d+\))/i,
            type: "Blind SQL Injection",
            recommendation: "Ensure all user inputs are sanitized and use parameterized queries to mitigate this risk."
        },
        {
            pattern: /(\bINSERT\b\s+INTO\s+\w+\s*\([^)]*\)\s*VALUES\s*\([^)]*?\$\{[^}]*\}[^)]*\))/i,
            type: "Enhanced Direct Insert Injection",
            recommendation: "Utilize parameterized statements to prevent SQL injection in INSERT operations."
        },
        {
            pattern: /(\bUPDATE\b\s+\w+\s+SET\s+.*?\$\{.*\})/i,
            type: "Update Injection",
            recommendation: "Use parameterized queries to avoid injecting user inputs directly into UPDATE statements."
        },
        {
            pattern: /(\bDELETE\b\s+FROM\b\s+\w+\s+WHERE\b\s+.*?\$\{.*\})/i,
            type: "Delete Injection",
            recommendation: "Always use parameterized queries when constructing DELETE statements."
        },
        {
            pattern: /(\bSELECT\b\s+.*?\bFROM\b\s+\w+\s+JOIN\b\s+\w+\s+ON\b\s+.*?\$\{.*\}\s+WHERE\b\s+.*?\$\{.*\})/i,
            type: "Complex Join Injection",
            recommendation: "Avoid including user inputs directly in JOIN conditions; use parameterized queries instead."
        },
        {
            pattern: /(\bSELECT\b\s+.*?\bFROM\b\s+.*?\bWHERE\b\s+.*?\bIN\b\s+\(.*\$\{.*\}.*\))/i,
            type: "Nested SQL Injection",
            recommendation: "Parameterize nested queries and validate all inputs to mitigate injection risks."
        }

    ];
    
    // Check if the query matches any vulnerable pattern
    for (const { pattern, type, recommendation } of sqliPatterns) {
        if (pattern.test(query)) {
            return { type, recommendation, vulnerableCode: query };
        }
    }

    return 0;
}

