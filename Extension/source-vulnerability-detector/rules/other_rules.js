// other_rules.js
module.exports = async function detectVulnerabilities(code) {
    const vulnerabilities = [];
    const lines = code.split('\n');
    let inMultiLineComment = false;

    const variableDeclarations = {};  // Store variable declarations

    for (let lineNumber = 0; lineNumber < lines.length; lineNumber++) {
        const line = lines[lineNumber].trim();

        // Handle multi-line comments
        if (line.includes('/*')) inMultiLineComment = true;
        if (line.includes('*/')) inMultiLineComment = false;
        if (inMultiLineComment || line.startsWith('//') || line.startsWith('#')) continue;

        // Extract variables
        const declarationMatch = /(const|let|var)\s+(\w+)\s*=\s*(.*?);/g.exec(line);
        if (declarationMatch) {
            const [_, declType, varName, varValue] = declarationMatch;
            variableDeclarations[varName] = { line: lineNumber + 1, code: line, value: varValue };
        }

        // Check each variable usage in later lines
        Object.keys(variableDeclarations).forEach(varName => {
            if (new RegExp(`\\b${varName}\\b`).test(line)) {
                // Additional checks for vulnerabilities based on usage
                vulnerabilities.push(...checkVariableUsage(line, varName, lineNumber, variableDeclarations[varName]));
            }
        });
    }

    return vulnerabilities;
}

function checkVariableUsage(line, varName, lineNumber, declarationDetails) {
    const vulnerabilities = [];
    
    // Checks for improper variable use in DOM manipulation
    const dangerousDOMUsageRegex = new RegExp(`document\\.getElementById\\(.*\\)\\.(innerHTML|outerHTML)\\s*=\\s*.*${varName}.*;`, 'g');

    // Checks for improper variable use in URL manipulation
    const dangerousURLUsageRegex = new RegExp(`(window\\.location\\.href|window\\.open|fetch|ajax)\\s*=\\s*.*${varName}.*;`, 'g');

    // Checks for direct JavaScript injection risk
    const dangerousJSInjectionRegex = new RegExp(`<script>.*${varName}.*<\/script>`, 'g');

    // Evaluate if the variable is used in a risky way
    if (dangerousDOMUsageRegex.test(line)) {
        vulnerabilities.push({
            type: "Potential DOM-based XSS",
            recommendation: "Use .textContent instead of .innerHTML or .outerHTML when inserting text into the DOM to prevent XSS.",
            vulnerableCode: line,
            declarationLine: declarationDetails.line,
            lineNumber: lineNumber + 1
        });
    }

    if (dangerousURLUsageRegex.test(line)) {
        vulnerabilities.push({
            type: "Potential URL Manipulation",
            recommendation: "Use encodeURI or encodeURIComponent to sanitize URLs when embedding variables.",
            vulnerableCode: line,
            declarationLine: declarationDetails.line,
            lineNumber: lineNumber + 1
        });
    }

    if (dangerousJSInjectionRegex.test(line)) {
        vulnerabilities.push({
            type: "Potential JavaScript Injection",
            recommendation: "Ensure JavaScript embedded in HTML is properly escaped to prevent injection attacks.",
            vulnerableCode: line,
            declarationLine: declarationDetails.line,
            lineNumber: lineNumber + 1
        });
    }

    return vulnerabilities;
}

