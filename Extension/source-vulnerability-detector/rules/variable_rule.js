const { detectXSSVulnerabilities } = require('./no_xss');

module.exports = async function detectVariableUsage(codespace) {
    const lines = codespace.split('\n');
    let inMultiLineComment = false;

    const variableDeclarations = {};  // Store variable declarations

    for (let lineNumber = 0; lineNumber < lines.length; lineNumber++) {
        const line = lines[lineNumber].trim();

        if (inMultiLineComment) {
            if (line.includes('*/')) inMultiLineComment = false;
            continue;
        }
        if (line.includes('/*')) {
            inMultiLineComment = true;
            continue;
        }
        if (line.startsWith('//')) continue; // Skip single-line comments

        // Extract variables with optional semicolon
        const declarationMatch = /(const|let|var)\s+(\w+)\s*=\s*(.*?)(;|$)/.exec(line);
        if (declarationMatch) {
            const [_, declType, varName, varValue] = declarationMatch;

            // Analyze if there is a function call and extract the inner value
            let rawValue = varValue;
            let functionCallMatch = /\w+\(([^)]+)\)/.exec(varValue);
            if (functionCallMatch) {
                // This captures the inner part of a function call
                rawValue = functionCallMatch[1];
            }

            // Check if the variable assignment includes any known sanitization methods
            const isSanitized = /DOMPurify\.sanitize\(|encodeURIComponent\(|encodeURI\(/.test(varValue);

            //console.log(`Variable ${varName} - sanitized: ${isSanitized}`);

            // Only add unsanitized variables to the dictionary to be checked for vulnerabilities
            if (!isSanitized) {
                variableDeclarations[varName] = {
                    line: lineNumber + 1,
                    code: line,
                    value: rawValue,  // Use the raw value or function input
                };
            }
        }
    }

    // Pass the variable declarations to the no_xss module
    const xssVulnerabilities = await detectXSSVulnerabilities(codespace, variableDeclarations);

    return xssVulnerabilities;
};
